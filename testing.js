const _ = require("lodash");
const Arrs2 = [
    { List: [11.04, 0, 0, 11.04, 72.024, 709.66] },
    { "~~~~~~": [11.04, 0, 0, 11.04, 77.544, 674.62] },
    { "Sriel Number": [11.04, 0, 0, 11.04, 77.544, 674.62] },
    { "~~~~~~": [11.04, 0, 0, 11.04, 141.80784, 674.62] },
    { "Company list": [11.04, 0, 0, 11.04, 194.57, 674.62] },
    { "~~~~~~": [11.04, 0, 0, 11.04, 258.23768, 674.62] },
    { "Employee number": [11.04, 0, 0, 11.04, 311.57, 674.62] },
    { "~~~~~~": [11.04, 0, 0, 11.04, 400.91671999999994, 674.62] },
    { "Comment or status": [11.04, 0, 0, 11.04, 428.59, 674.62] },
    { "~~~~~~": [11.04, 0, 0, 11.04, 77.544, 650.86] },
    { "01": [11.04, 0, 0, 11.04, 77.544, 650.86] },
    { "~~~~~~": [11.04, 0, 0, 11.04, 89.80228, 650.86] },
    { "NX Group": [11.04, 0, 0, 11.04, 194.57, 650.86] },
    { "~~~~~~": [11.04, 0, 0, 11.04, 243.64279999999997, 650.86] },
    { "03 Nos": [11.04, 0, 0, 11.04, 311.57, 650.86] },
    { "~~~~~~": [11.04, 0, 0, 11.04, 346.50055999999995, 650.86] },
    { Verified: [11.04, 0, 0, 11.04, 428.59, 650.86] },
    { "~~~~~~": [11.04, 0, 0, 11.04, 77.544, 627.22] },
    { "02": [11.04, 0, 0, 11.04, 77.544, 627.22] },
    { "~~~~~~": [11.04, 0, 0, 11.04, 89.80228, 627.22] },
    { "LG Inc": [11.04, 0, 0, 11.04, 194.57, 627.22] },
    { "~~~~~~": [11.04, 0, 0, 11.04, 227.10488, 627.22] },
    { "05 Nos": [11.04, 0, 0, 11.04, 311.57, 627.22] },
    { "~~~~~~": [11.04, 0, 0, 11.04, 346.50055999999995, 627.22] },
    { Failure: [11.04, 0, 0, 11.04, 428.59, 627.22] },
    { "~~~~~~": [11.04, 0, 0, 11.04, 77.544, 603.58] },
    { "03": [11.04, 0, 0, 11.04, 77.544, 603.58] },
    { "~~~~~~": [11.04, 0, 0, 11.04, 89.80228, 603.58] },
    { "MX Stationary": [11.04, 0, 0, 11.04, 194.57, 603.58] },
    { "~~~~~~": [11.04, 0, 0, 11.04, 263.74663999999996, 603.58] },
    { "05 Nos": [11.04, 0, 0, 11.04, 311.57, 603.58] },
    { "~~~~~~": [11.04, 0, 0, 11.04, 346.50055999999995, 603.58] },
    { ok: [11.04, 0, 0, 11.04, 428.59, 603.58] },
    { "~~~~~~": [11.04, 0, 0, 11.04, 77.544, 579.94] },
    { "04": [11.04, 0, 0, 11.04, 77.544, 579.94] },
    { "~~~~~~": [11.04, 0, 0, 11.04, 89.80228, 579.94] },
    { MSCS: [11.04, 0, 0, 11.04, 194.57, 579.94] },
    { "~~~~~~": [11.04, 0, 0, 11.04, 226.39831999999996, 579.94] },
    { "03 nos": [11.04, 0, 0, 11.04, 311.57, 579.94] },
    { "~~~~~~": [11.04, 0, 0, 11.04, 344.68999999999994, 579.94] },
    { Failure: [11.04, 0, 0, 11.04, 428.59, 579.94] },
];
const Arrs = [
    { List: [11.16, 0, 0, 11.16, 72.048, 709.87] },
    { "": [11.16, 0, 0, 11.16, 77.448, 674.95] },
    { "Sriel Number": [11.16, 0, 0, 11.16, 77.448, 674.95] },
    { "~~~~~~": [11.16, 0, 0, 11.16, 141.58452, 674.95] },
    { "Company list": [11.16, 0, 0, 11.16, 194.52, 674.95] },
    { "~~~~~~": [11.16, 0, 0, 11.16, 258.05388000000005, 674.95] },
    { "Employee number": [11.16, 0, 0, 11.16, 311.59, 674.95] },
    { "~~~~~~": [11.16, 0, 0, 11.16, 400.91464, 674.95] },
    { "Comment or status": [11.16, 0, 0, 11.16, 428.66, 674.95] },
    { "": [11.16, 0, 0, 11.16, 77.448, 651.17] },
    { "01": [11.16, 0, 0, 11.16, 77.448, 651.17] },
    { "~~~~~~": [11.16, 0, 0, 11.16, 89.77292, 651.17] },
    { Verified: [11.16, 0, 0, 11.16, 428.66, 651.17] },
    { "": [11.16, 0, 0, 11.16, 77.448, 627.41] },
    { "02": [11.16, 0, 0, 11.16, 77.448, 627.41] },
    { "~~~~~~": [11.16, 0, 0, 11.16, 89.77292, 627.41] },
    { "LG Inc": [11.16, 0, 0, 11.16, 194.52, 627.41] },
    { "~~~~~~": [11.16, 0, 0, 11.16, 227.06256000000002, 627.41] },
    { "05 Nos": [11.16, 0, 0, 11.16, 311.59, 627.41] },
    { "": [11.16, 0, 0, 11.16, 77.448, 603.62] },
    { "03": [11.16, 0, 0, 11.16, 77.448, 603.62] },
    { "~~~~~~": [11.16, 0, 0, 11.16, 89.77292, 603.62] },
    { "MX Stationary": [11.16, 0, 0, 11.16, 194.52, 603.62] },
    { "~~~~~~": [11.16, 0, 0, 11.16, 263.37719999999996, 603.62] },
    { ok: [11.16, 0, 0, 11.16, 428.66, 603.62] },
    { "": [11.16, 0, 0, 11.16, 194.52, 580.22] },
    { MSCS: [11.16, 0, 0, 11.16, 194.52, 580.22] },
    { "~~~~~~": [11.16, 0, 0, 11.16, 226.42644000000004, 580.22] },
    { "03 nos": [11.16, 0, 0, 11.16, 311.59, 580.22] },
    { "~~~~~~": [11.16, 0, 0, 11.16, 344.5008399999999, 580.22] },
    { Failure: [11.16, 0, 0, 11.16, 428.66, 580.22] },
];

function func2(params) {
    const totalRows = [];
    for (const single of Arrs) {
        const [k, v] = Object.entries(single)[0];
        // if (k !== "~~~~~~") {
        const val = v[v.length - 2];
        // console.log(typeof val)
        if (!totalRows.includes(val)) totalRows.push(val);
        // }
    }
    const sorted = totalRows.sort(function (a, b) {
        return a - b;
    });

    const newObj = {};
    for (const single of Arrs) {
        const [v, loc] = Object.entries(single)[0];
        const lastKey = loc[loc.length - 1];
        if (newObj[lastKey]) {
            // newObj[lastKey].push(v);
            newObj[lastKey].push({ val: v, loc });
        } else {
            // newObj[lastKey] = [v];
            // console.log(loc)
            newObj[lastKey] = [{ val: v, loc }];
        }

        // if (newObj[k]) {
        //     newObj[k].push(v);
        // } else {
        //     newObj[k] = [v];
        // }
    }
    const newArr = [],
        cleanArr = [],
        empty = [];
    for (const single of Object.values(newObj)) {
        let copy = JSON.parse(JSON.stringify(sorted));
        for (const { val, loc } of single) {
            const oneLoc = loc[loc.length - 2];
            copy[sorted.indexOf(oneLoc)] = val === "~~~~~~" ? "" : val;
        }
        const emp = [];
        newArr.push(
            copy.map((item, i) => {
                const clear = sorted.includes(item) ? "" : item;
                if (clear === "") {
                    emp.push(i);
                }
                return clear;
            })
        );
        empty.push(emp);
    }
    const result1 = _.intersection(...empty);
    for (let single of newArr) {
        // for (const del of result1) {
        //     // single.pop(del);

        // }

        cleanArr.push(single.filter((item, k) => !result1.includes(k)));
    }
    let csv = "";
    for (const item of cleanArr) {
        csv +=
            item
                .map((im) => {
                    if (im === "~~~~~~") return "";
                    return im;
                })
                .join(",") + "\n";
    }
    require("fs").writeFileSync("testing-------.csv", csv);
}

func2();

function func1(params) {
    const newObj = {};
    for (const single of Arrs) {
        const [v, loc] = Object.entries(single)[0];
        const lastKey = loc[loc.length - 1];

        if (newObj[lastKey]) {
            newObj[lastKey].push(v);
            // newObj[lastKey].push({ val: v, loc });
        } else {
            newObj[lastKey] = [v];
            // newObj[lastKey] = [{ val: v, loc }];
        }

        // if (newObj[k]) {
        //     newObj[k].push(v);
        // } else {
        //     newObj[k] = [v];
        // }
    }
    // console.log(newObj)
    const newArr = {};
    let csv = "";
    for (const item of Object.values(newObj)) {
        csv +=
            item
                .map((im) => {
                    if (im === "~~~~~~") return "";
                    return im;
                })
                .join(",") + "\n";
    }
    require("fs").writeFileSync("testing-------.csv", csv);
    // console.log(csv, "csv");
}
